
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, v as validate_slots, e as element, a as attr_dev, b as add_location, c as insert_dev, f as add_render_callback, g as create_bidirectional_transition, h as detach_dev, j as space, k as append_dev, l as listen_dev, t as transition_in, m as transition_out, n as check_outros, r as run_all, o as group_outros } from './main2.js';
import { f as fade } from './index.js';

/* src\routes\Noise.svelte generated by Svelte v3.38.2 */
const file = "src\\routes\\Noise.svelte";

// (20:4) {#if show == 1}
function create_if_block_1(ctx) {
	let img;
	let img_src_value;
	let img_transition;
	let current;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "class", "content-img svelte-baek3z");
			if (img.src !== (img_src_value = "images/noise_existing.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Noise Existing");
			add_location(img, file, 20, 6, 464);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!img_transition) img_transition = create_bidirectional_transition(img, fade, {}, true);
				img_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!img_transition) img_transition = create_bidirectional_transition(img, fade, {}, false);
			img_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching && img_transition) img_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(20:4) {#if show == 1}",
		ctx
	});

	return block;
}

// (28:4) {#if show == 2}
function create_if_block(ctx) {
	let img;
	let img_src_value;
	let img_transition;
	let current;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "class", "content-img svelte-baek3z");
			if (img.src !== (img_src_value = "images/noise_option2.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Noise Option 2");
			add_location(img, file, 28, 6, 643);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!img_transition) img_transition = create_bidirectional_transition(img, fade, {}, true);
				img_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!img_transition) img_transition = create_bidirectional_transition(img, fade, {}, false);
			img_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching && img_transition) img_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(28:4) {#if show == 2}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let main;
	let div0;
	let button0;
	let t1;
	let button1;
	let t3;
	let div1;
	let t4;
	let current;
	let mounted;
	let dispose;
	let if_block0 = /*show*/ ctx[0] == 1 && create_if_block_1(ctx);
	let if_block1 = /*show*/ ctx[0] == 2 && create_if_block(ctx);

	const block = {
		c: function create() {
			main = element("main");
			div0 = element("div");
			button0 = element("button");
			button0.textContent = "EIA No Mitigation Measures";
			t1 = space();
			button1 = element("button");
			button1.textContent = "With Mitigation Measures";
			t3 = space();
			div1 = element("div");
			if (if_block0) if_block0.c();
			t4 = space();
			if (if_block1) if_block1.c();
			attr_dev(button0, "class", "nav-btn svelte-baek3z");
			add_location(button0, file, 11, 4, 182);
			attr_dev(button1, "class", "nav-btn svelte-baek3z");
			add_location(button1, file, 14, 4, 295);
			attr_dev(div0, "class", "nav svelte-baek3z");
			add_location(div0, file, 10, 2, 159);
			attr_dev(div1, "class", "content svelte-baek3z");
			add_location(div1, file, 18, 2, 414);
			attr_dev(main, "class", "svelte-baek3z");
			add_location(main, file, 9, 0, 149);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, div0);
			append_dev(div0, button0);
			append_dev(div0, t1);
			append_dev(div0, button1);
			append_dev(main, t3);
			append_dev(main, div1);
			if (if_block0) if_block0.m(div1, null);
			append_dev(div1, t4);
			if (if_block1) if_block1.m(div1, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*click_handler*/ ctx[2], false, false, false),
					listen_dev(button1, "click", /*click_handler_1*/ ctx[3], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*show*/ ctx[0] == 1) {
				if (if_block0) {
					if (dirty & /*show*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t4);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*show*/ ctx[0] == 2) {
				if (if_block1) {
					if (dirty & /*show*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Noise", slots, []);
	let { show } = $$props;

	function switchContent(index) {
		$$invalidate(0, show = index);
	}

	const writable_props = ["show"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Noise> was created with unknown prop '${key}'`);
	});

	const click_handler = () => switchContent(1);
	const click_handler_1 = () => switchContent(2);

	$$self.$$set = $$props => {
		if ("show" in $$props) $$invalidate(0, show = $$props.show);
	};

	$$self.$capture_state = () => ({ fade, show, switchContent });

	$$self.$inject_state = $$props => {
		if ("show" in $$props) $$invalidate(0, show = $$props.show);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [show, switchContent, click_handler, click_handler_1];
}

class Noise extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { show: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Noise",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*show*/ ctx[0] === undefined && !("show" in props)) {
			console.warn("<Noise> was created without expected prop 'show'");
		}
	}

	get show() {
		throw new Error("<Noise>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show(value) {
		throw new Error("<Noise>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Noise;
//# sourceMappingURL=Noise.js.map
